'use strict';

document.addEventListener('DOMContentLoaded', () => {

  console.warn('Починаю систематизувати знання JS');

  console.error('Error');
  console.log('Просте інформаційне повідомлення');
  console.dir('Відображення елементів вигляді JS обектів');
  console.table('Відображення елементів у табличній формі');

  console.error(' *** Початок видображення типів даних *** ');

  console.table([
    {
      'Тип даних': 'number',
      Значення: 'ціле число, число з плаваючою точкою',
    },
    {
      'Тип даних': 'string',
      Значення: 'строчка з літери, числа, слів або словосполучень',
    },
    {
      'Тип даних': 'boolean',
      Значення:
        'Логічний тип даних, яке має два варіанта значення : true або false',
    },
    {
      'Тип даних': 'null',
      Значення:
        'Cпеціальне примітивне значення, яке використовується для позначення відсутності або навмисного очищення значення змінної, тобто змінна явно не має жодного значення.',
    },
    {
      'Тип даних': 'undefined',
      Значення:
        'Якщо змінна була оголошена, але їй не було присвено жодного значення',
    },
    {
      'Тип даних': 'Object',
      Значення:
        "Складний тип даних, який використовується для зберігання колекцій структурованих данних у вигляді ключ-значення. Ключі - це рядки або символи, а значення - будь-які типи даних, включаючи інші об'єкти.",
    },
    {
      'Тип даних': 'Symbol',
      Значення:
        "Примітивний тип даних, який використовується для створення унікальних ідентифікаторів, гарантуеться, що кожне створене значення Symbol є унікальним, навіть якщо вони мають однакові описи. Їх часто використовують як ключі в об'єктах для уникнення конфліктів імен.",
    },
    {
      'Тип даних': 'BigInt',
      Значення:
        'Примітивний тип даних, який використовується для роботи з цілими числами, більшими за ті, що можуть бути представлені типом Number. Він дозволяє працювати з дуже великими цілими числами без втрати точності.',
    },
  ]);
  let userObject = {
    name: 'Ivan',
    age: 30,
  };

  console.log(userObject.name); 

  let id = Symbol('id');
  let user = {
    name: 'Ivan',
    [id]: 123,
  };

  console.log(user[id]); 


  let bigNumber = 1234567890123456789012345678901234567890;
  let anotherBigNumber = BigInt('1234567890123456789012345678901234567890');

  console.log(
    'Виводитьcя просто велике число в типу Number : ' +
      bigNumber +
      ' \n' +
      'Виводитьcя теж число, але оброблене за допомогою функції BigInt()  :' +
      anotherBigNumber
  ); 

  console.error('\n' + ' *** Кінець видображення типів даних *** ');

  console.error('\n' + ' *** Перетворення типів даних *** ');

  console.log('Як працювати з String');
  const stringDataType = 'Це строчка яка може буди завгодно якої довжини';
  console.info('Тип даних строка : ', typeof stringDataType);
  const numberToSting = 123;
  console.info('Число : ', numberToSting);
  console.info('Тип даних число: ', typeof numberToSting);
  let rezNumberToSting = String(numberToSting);
  console.info('Вивожу число я строку 123: ', rezNumberToSting); 
  console.info(
    'Перетворення тип даних 123 воно є строчкой: ',
    typeof rezNumberToSting
  ); 

  const otherNumberToSting = numberToSting.toString();

  console.info(
    'Інший спосіб перетворенння числа в строчку: ',
    otherNumberToSting
  ); 
  console.info('Тип даних: ', typeof otherNumberToSting);

  console.log(' ');
  console.log('Як працювати з Number');
  const stringNamberDataType = '555';
  console.info('Вихідні дані: ', stringNamberDataType);
  console.info(
    'Я створив змінну з типом даних - число: ',
    typeof stringNamberDataType
  );
  const getstringNamberDataType = Number(stringNamberDataType);
  console.info('Перетворив строку в число : ', getstringNamberDataType); 
  console.info('Тип даних число : ', typeof getstringNamberDataType);
  console.log(' ');
  const strToNum = 'шість';
  console.info('Число шість літерами  : ', strToNum);
  console.info('Тип даних число : ', typeof strToNum);
  const getStrToNum = Number(strToNum);
  const getStr2Num = parseInt(strToNum);
  console.info('Результат  : ' + getStrToNum + ' ' + typeof getStrToNum);
  console.info('Результат  : ' + getStr2Num + ' ' + typeof getStr2Num);

  console.log(' ');

  console.log('Як працювати з Boolean');
  const booleanDataType = true;
  console.info('Змінна :', booleanDataType);
  console.info('Тип даних логічний :', typeof booleanDataType);

  console.log(' ');

  console.log('Як працювати з Null');
  const nullDataType = null; 
  console.info('Зміна :', nullDataType);
  console.info('Тип даних nullDataType :', typeof nullDataType);

  console.log(' ');

  console.log('Як працювати з Undefined');
  const undefinedDataType = undefined; 
  console.info('Зміна :', undefinedDataType);
  console.info('Тип даних undefinedDataType :', typeof undefinedDataType);

  console.log(' ');

  console.log('Як працювати з Object');
  const obgectDataType = {};
  console.info('Зміна :', obgectDataType);
  console.info('Тип даних obgectDataType :', typeof obgectDataType);
  const str = 'Hello';
  const obj = Object(str); 

  console.log(' ');

  console.log('Як працювати з Symbol');
  console.log('Зміна :', Symbol('description')); 
  console.log('Тип даних symbol :', typeof Symbol('description'));

  console.log(' ');

  console.log('Як працювати з BigInt');
  const numToBigint = 123;
  console.info('Зміна :', numToBigint);
  console.info('Тип даних зміній :', typeof numToBigint);
  const getNumToBigint = BigInt(numToBigint);
  console.info('Нова зміна :', getNumToBigint);
  console.info('Тип даних зміній після перетворення :', typeof getNumToBigint);


  console.error('\n' + ' **** Оператори в JS *** ');


  console.error('\n' + ' **** Кінець оператори в JS *** ');


  console.warn('Нижче не систематизованна інформація з JS');
});